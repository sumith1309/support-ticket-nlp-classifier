# -*- coding: utf-8 -*-
"""NLP GROUP PROJECT .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cb7y0n-qVXtxiXCpbyVObYS5CxL4Bqfe
"""

!pip install streamlit pyngrok

from pyngrok import conf, ngrok


conf.get_default().auth_token = "2uJPiHzaycLc3sCcUNcbsNqZcfU_2C5QY7smRQfbnFM5iYfBu"

!pip install streamlit-lottie

import streamlit as st
from transformers import pipeline
import pandas as pd
from streamlit_lottie import st_lottie
import requests

# ---------------------- Setup ----------------------
st.set_page_config(
    page_title="Smart Ticket Categorizer",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load Lottie animation for sidebar branding
def load_lottie_url(url):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

lottie_logo = load_lottie_url("https://assets6.lottiefiles.com/packages/lf20_totrpclr.json")

# ---------------------- Model ----------------------
st.cache_resource
def load_model():
    return pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

classifier = load_model()

categories = [
    "Network Issue",
    "Software Installation",
    "Hardware Failure",
    "Account Access",
    "Email Problem",
    "Printer Issue",
    "Security Concern",
    "Performance Problem",
    "VPN Issue",
    "General Inquiry"
]

# ---------------------- Sidebar ----------------------
with st.sidebar:
    st_lottie(lottie_logo, height=200, key="logo")
    st.title("ü™Ñ Ticket Classifier Pro")
    st.markdown("""
    Predict categories of IT tickets instantly using advanced NLP.
    Built with Hugging Face & Streamlit.
    """)
    st.write("""---""")
    st.markdown("[GitHub](https://github.com/) | [Streamlit.io](https://streamlit.io)")

# ---------------------- Main UI ----------------------
st.title(":sparkles: AI-Powered IT Ticket Categorizer")
st.markdown("""
Upload your support tickets or type one manually. This app will classify the issues using a state-of-the-art NLP model trained for zero-shot classification.
""")

col1, col2 = st.columns([1, 2])

# Input options
with col1:
    option = st.radio("Choose input method:", ["Manual Entry", "Upload CSV"])

    ticket_texts = []

    if option == "Manual Entry":
        text = st.text_area("Enter support ticket description", height=200, placeholder="e.g. I can't connect to VPN from home...")
        if text:
            ticket_texts.append(text)

    elif option == "Upload CSV":
        uploaded = st.file_uploader("Upload CSV with a 'ticket' column", type=["csv"])
        if uploaded:
            df = pd.read_csv(uploaded)
            if 'ticket' in df.columns:
                ticket_texts = df['ticket'].tolist()
            else:
                st.error("The file must contain a 'ticket' column.")

# Predict
with col2:
    if st.button("üîç Classify Tickets"):
        if not ticket_texts:
            st.warning("Please enter or upload at least one ticket.")
        else:
            st.subheader(":bar_chart: Prediction Results")
            with st.spinner("Analyzing tickets with AI..."):
                result_data = []
                for text in ticket_texts:
                    out = classifier(text, candidate_labels=categories)
                    result_data.append({
                        "Ticket": text,
                        "Category": out['labels'][0],
                        "Confidence %": round(out['scores'][0]*100, 2)
                    })
                results_df = pd.DataFrame(result_data)
                st.dataframe(results_df, use_container_width=True)

                csv = results_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    "üìÇ Download Predictions as CSV",
                    csv,
                    "ticket_predictions.csv",
                    "text/csv"
                )

# Footer
st.markdown("""
---
:star: Made with love using Streamlit, Transformers, and Lottie animations.
""")

# üîß STEP 1: Install dependencies
!pip install streamlit pyngrok transformers pandas streamlit-lottie

# üîê STEP 2: Set your ngrok authtoken (get it from https://dashboard.ngrok.com/get-started/your-authtoken)
from pyngrok import conf, ngrok
conf.get_default().auth_token = "2uJPiHzaycLc3sCcUNcbsNqZcfU_2C5QY7smRQfbnFM5iYfBu"  # ‚Üê REPLACE with your actual token

# üß† STEP 3: Save the enhanced Streamlit dashboard code
with open("app.py", "w") as f:
    f.write("""
import streamlit as st
from transformers import pipeline
import pandas as pd
from streamlit_lottie import st_lottie
import requests

# ---------------------- Setup ----------------------
st.set_page_config(
    page_title="Smart Ticket Categorizer",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load Lottie animation for sidebar branding
def load_lottie_url(url):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

lottie_logo = load_lottie_url("https://assets6.lottiefiles.com/packages/lf20_totrpclr.json")

# ---------------------- Model ----------------------
@st.cache_resource
def load_model():
    return pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

classifier = load_model()

categories = [
    "Network Issue",
    "Software Installation",
    "Hardware Failure",
    "Account Access",
    "Email Problem",
    "Printer Issue",
    "Security Concern",
    "Performance Problem",
    "VPN Issue",
    "General Inquiry"
]

# ---------------------- Sidebar ----------------------
with st.sidebar:
    if lottie_logo:
        st_lottie(lottie_logo, height=200, key="logo")
    st.title("‚ú® Ticket Classifier Pro")
    st.markdown(\"\"\"
    Predict categories of IT tickets instantly using advanced NLP.
    Built with Hugging Face & Streamlit.
    \"\"\")
    st.write(\"\"\"---\"\"\")
    st.markdown(\"[GitHub](https://github.com/) | [Streamlit.io](https://streamlit.io)\")

# ---------------------- Main UI ----------------------
st.title(":sparkles: AI-Powered IT Ticket Categorizer")
st.markdown(\"\"\"
Upload your support tickets or type one manually. This app will classify the issues using a state-of-the-art NLP model trained for zero-shot classification.
\"\"\")

col1, col2 = st.columns([1, 2])

# Input options
with col1:
    option = st.radio("Choose input method:", ["Manual Entry", "Upload CSV"])

    ticket_texts = []

    if option == "Manual Entry":
        text = st.text_area("Enter support ticket description", height=200, placeholder="e.g. I can't connect to VPN from home...")
        if text:
            ticket_texts.append(text)

    elif option == "Upload CSV":
        uploaded = st.file_uploader("Upload CSV with a 'ticket' column", type=["csv"])
        if uploaded:
            df = pd.read_csv(uploaded)
            if 'ticket' in df.columns:
                ticket_texts = df['ticket'].tolist()
            else:
                st.error("The file must contain a 'ticket' column.")

# Predict
with col2:
    if st.button("üîç Classify Tickets"):
        if not ticket_texts:
            st.warning("Please enter or upload at least one ticket.")
        else:
            st.subheader(":bar_chart: Prediction Results")
            with st.spinner("Analyzing tickets with AI..."):
                result_data = []
                for text in ticket_texts:
                    out = classifier(text, candidate_labels=categories)
                    result_data.append({
                        "Ticket": text,
                        "Category": out['labels'][0],
                        "Confidence %": round(out['scores'][0]*100, 2)
                    })
                results_df = pd.DataFrame(result_data)
                st.dataframe(results_df, use_container_width=True)

                csv = results_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    "üìÇ Download Predictions as CSV",
                    csv,
                    "ticket_predictions.csv",
                    "text/csv"
                )

# Footer
st.markdown(\"\"\"
---
:star: Made with love using Streamlit, Transformers, and Lottie animations.
\"\"\")
""")

# üöÄ STEP 4: Launch the Streamlit app via ngrok
import os
os.system("streamlit run app.py &")
public_url = ngrok.connect(addr="8501")
print(f"üåê Your app is live at: {public_url}")

